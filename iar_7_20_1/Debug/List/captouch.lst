###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        05/Apr/2016  16:27:45
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\drivers\captouch.c
#    Command line =  
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\drivers\captouch.c
#        --preprocess=cl
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\Debug\List\
#        -lC
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\ -I
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\..\drivers\
#        -I
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\..\application\
#        -I
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\..\libraries\captouch\
#        -I
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\Debug\List\captouch.lst
#    Object file  =  
#        C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\iar_7_20_1\Debug\Obj\captouch.o
#
###############################################################################

C:\Users\Theo\Documents\GitHub\MPGL2\firmware_mpgl2\drivers\captouch.c
      1          /***********************************************************************************************************************
      2          File: captouch.c
      3          
      4          Description:
      5          Driver for Capacitive Touch sensors. This code supports the horizontal slider on the MPG2 board
      6          and any future buttons/sliders that may be added.
      7          
      8          API:
      9          void CapTouchOn(void)
     10          Activates the Captouch sensors
     11          
     12          void CapTouchOff(void)
     13          De-activates the Captouch sensors
     14          
     15          u8 CaptouchCurrentHSlidePosition(void)
     16          Returns the current horizontal slider value where "0" is the furthest left and "255" is the furthest right on the slider.
     17          
     18          u8 CaptouchCurrentVSlidePosition(void)
     19          Returns the current vertical slider value where "0" is the location near the bottom of the board and "255" is the top.
     20          
     21          
     22          ------------------------------------------------------------------------------------------------------------------------
     23          DISCLAIMER: THIS CODE IS PROVIDED WITHOUT ANY WARRANTY OR GUARANTEES.  USERS MAY
     24          USE THIS CODE FOR DEVELOPMENT AND EXAMPLE PURPOSES ONLY.  ENGENUICS TECHNOLOGIES
     25          INCORPORATED IS NOT RESPONSIBLE FOR ANY ERRORS, OMISSIONS, OR DAMAGES THAT COULD
     26          RESULT FROM USING THIS FIRMWARE IN WHOLE OR IN PART.
     27          ***********************************************************************************************************************/
     28          
     29          #include "configuration.h"
     30          #include "libqtouch.h"
     31          
     32          
     33          #define GET_SENSOR_STATE(SENSOR_NUMBER) (qt_measure_data.qt_touch_status.sensor_states[(SENSOR_NUMBER/8)] & (1 << (SENSOR_NUMBER % 8)))
     34          #define GET_ROTOR_SLIDER_POSITION(ROTOR_SLIDER_NUMBER) qt_measure_data.qt_touch_status.rotor_slider_values[ROTOR_SLIDER_NUMBER]
     35          
     36          
     37          /***********************************************************************************************************************
     38          Global variable definitions with scope across entire project.
     39          All Global variable names shall start with "G_CapTouch"
     40          ***********************************************************************************************************************/
     41          
     42          
     43          /*--------------------------------------------------------------------------------------------------------------------*/
     44          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     45          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     46          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     47          
     48          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     49          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     50          
     51          /* measurement data */
     52          extern qt_touch_lib_measure_data_t qt_measure_data;
     53          
     54          extern u32 G_u32DebugFlags;                            /* From debug.c */
     55          
     56          
     57          /***********************************************************************************************************************
     58          Global variable definitions with scope limited to this local application.
     59          Variable names shall start with "CapTouch_" and be declared as static.
     60          ***********************************************************************************************************************/
     61          /* New variables */

   \                                 In section .bss, align 4
     62          fnCode_type CapTouch_pfnStateMachine;                  /* The state machine function pointer */
   \                     CapTouch_pfnStateMachine:
   \   00000000                      DS8 4
     63          

   \                                 In section .bss, align 4
     64          u32 CapTouch_u32Timer;                                 /* Measurement timer */        
   \                     CapTouch_u32Timer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     65          u8 CapTouch_u8CurrentHSliderValue;                     /* Current horizontal slider value */
   \                     CapTouch_u8CurrentHSliderValue:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     66          u8 CapTouch_u8CurrentVSliderValue;                     /* Current vertical slider value */
   \                     CapTouch_u8CurrentVSliderValue:
   \   00000000                      DS8 1
     67          
     68          
     69          /***********************************************************************************************************************
     70          Function Definitions
     71          ***********************************************************************************************************************/
     72          
     73          /*--------------------------------------------------------------------------------------------------------------------*/
     74          /* Public functions                                                                                                   */
     75          /*--------------------------------------------------------------------------------------------------------------------*/
     76          
     77          /*----------------------------------------------------------------------------------------------------------------------
     78          Function: CapTouchOn
     79          
     80          Description:
     81          Sets the state machine to "Measuring" so that the captouch functionality is active.  This is fairly processor intensive.
     82          
     83          Requires:
     84          
     85          Promises:
     86            - Horizontal CapTouch sensor is active
     87          
     88          */

   \                                 In section .text, align 2, keep-with-next
     89          void CapTouchOn(void)
     90          {
     91            CapTouch_pfnStateMachine = CapTouchSM_Measure;
   \                     CapTouchOn: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,CapTouchSM_Measure
   \   00000004   0x....             LDR.N    R1,??DataTable10_1
   \   00000006   0x6008             STR      R0,[R1, #+0]
     92            
     93          } /* end CapTouchOn() */
   \   00000008   0x4770             BX       LR               ;; return
     94          
     95          
     96          /*----------------------------------------------------------------------------------------------------------------------
     97          Function: CapTouchOff
     98          
     99          Description:
    100          Sets the state machine to "Idle" so that the captouch functionality is disabled.
    101          
    102          Requires:
    103          
    104          Promises:
    105            - Horizontal CapTouch sensor is not active
    106          */

   \                                 In section .text, align 2, keep-with-next
    107          void CapTouchOff(void)
    108          {
    109            CapTouch_pfnStateMachine = CapTouchSM_Idle;
   \                     CapTouchOff: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,CapTouchSM_Idle
   \   00000004   0x....             LDR.N    R1,??DataTable10_1
   \   00000006   0x6008             STR      R0,[R1, #+0]
    110            CapTouch_u8CurrentHSliderValue = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable10_2
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    111            CapTouch_u8CurrentVSliderValue = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR.N    R1,??DataTable10_3
   \   00000012   0x7008             STRB     R0,[R1, #+0]
    112            
    113          } /* end CapTouchOff() */
   \   00000014   0x4770             BX       LR               ;; return
    114          
    115          
    116          /*----------------------------------------------------------------------------------------------------------------------
    117          Function: CaptouchCurrentHSlidePosition
    118          
    119          Description:
    120          Returns the current slider count (0-254)
    121          
    122          Requires:
    123          
    124          Promises:
    125            - Returns the current slider count (0-254)
    126          */

   \                                 In section .text, align 2, keep-with-next
    127          u8 CaptouchCurrentHSlidePosition(void)
    128          {
    129            return CapTouch_u8CurrentHSliderValue;
   \                     CaptouchCurrentHSlidePosition: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    130            
    131          } /* end CaptouchCurrentHSlidePosition() */
    132          
    133          
    134          /*----------------------------------------------------------------------------------------------------------------------
    135          Function: CaptouchCurrentVSlidePosition
    136          
    137          Description:
    138          Returns the current slider count (0-254)
    139          
    140          Requires:
    141          
    142          Promises:
    143            - Returns the current slider count (0-254)
    144          */

   \                                 In section .text, align 2, keep-with-next
    145          u8 CaptouchCurrentVSlidePosition(void)
    146          {
    147            return CapTouch_u8CurrentVSliderValue;
   \                     CaptouchCurrentVSlidePosition: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_3
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    148            
    149          } /* end CaptouchCurrentVSlidePosition() */
    150          
    151          
    152          /*--------------------------------------------------------------------------------------------------------------------*/
    153          /* Protected functions                                                                                                */
    154          /*--------------------------------------------------------------------------------------------------------------------*/
    155          
    156          /*----------------------------------------------------------------------------------------------------------------------
    157          Function: CapTouchInitialize
    158          
    159          Description:
    160          This function initializes the module. The library version is checked, the
    161          buttons being used are initialized, and the configuration parameters are set.
    162          
    163          The qt_xxx functions are part of the QTouch API.
    164          
    165          Requires:
    166          
    167          Promises:
    168            - Returns ERROR if the library doesn't match what's expected, else SUCCESS
    169          
    170          */

   \                                 In section .text, align 2, keep-with-next
    171          ErrorStatus CapTouchInitialize(void)
    172          {
   \                     CapTouchInitialize: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    173          	/* Ensure library is correct */
    174          	if (CapTouchVerify() != SUCCESS)
   \   00000002   0x.... 0x....      BL       CapTouchVerify
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD001             BEQ.N    ??CapTouchInitialize_0
    175          	{
    176          		return (ERROR);
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE038             B.N      ??CapTouchInitialize_1
    177          	}
    178          
    179          	/* Reset touch sensing */
    180          	qt_reset_sensing();
   \                     ??CapTouchInitialize_0: (+1)
   \   0000000E   0x.... 0x....      BL       qt_reset_sensing
    181          
    182            /* Configure the GPIO used for the Horizontal Slider */
    183            qt_enable_slider( CHANNEL_0, CHANNEL_2, NO_AKS_GROUP, 50u, HYST_50, RES_8_BIT, 0u  );
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x9002             STR      R0,[SP, #+8]
   \   00000016   0x2007             MOVS     R0,#+7
   \   00000018   0x9001             STR      R0,[SP, #+4]
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x2332             MOVS     R3,#+50
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x2102             MOVS     R1,#+2
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       qt_enable_slider
    184          
    185            /* Configure the GPIO used for the Vertical Slider */
    186            qt_enable_slider( CHANNEL_19, CHANNEL_21, NO_AKS_GROUP, 50u, HYST_50, RES_8_BIT, 0u  );
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x9002             STR      R0,[SP, #+8]
   \   0000002E   0x2007             MOVS     R0,#+7
   \   00000030   0x9001             STR      R0,[SP, #+4]
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0x2332             MOVS     R3,#+50
   \   00000038   0x2200             MOVS     R2,#+0
   \   0000003A   0x2115             MOVS     R1,#+21
   \   0000003C   0x2013             MOVS     R0,#+19
   \   0000003E   0x.... 0x....      BL       qt_enable_slider
    187          
    188            /* Initialise and calibrate touch sensing (all sensors must be enabled first)*/
    189            qt_init_sensing();
   \   00000042   0x....             LDR.N    R1,??DataTable10_4
   \   00000044   0x....             LDR.N    R0,??DataTable10_5
   \   00000046   0x.... 0x....      BL       qt_init_sensing_with_burst
    190            qt_calibrate_sensing();
   \   0000004A   0x.... 0x....      BL       qt_calibrate_sensing
    191          
    192            /* Set the parameters like recalibration threshold, Max_On_Duration etc .
    193            These are user configurable */
    194            CapTouchSetParameters( );
   \   0000004E   0x.... 0x....      BL       CapTouchSetParameters
    195          
    196            /* Address to pass address of user functions */
    197            /* This function is called after the library has made capacitive measurements,
    198            but before it has processed them. The user can use this hook to apply filter
    199            functions to the measured signal values.(Possibly to fix sensor layout faults) */
    200            qt_filter_callback = 0;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x....             LDR.N    R1,??DataTable10_6
   \   00000056   0x6008             STR      R0,[R1, #+0]
    201          
    202            CapTouch_u32Timer = 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x....             LDR.N    R1,??DataTable10_7
   \   0000005C   0x6008             STR      R0,[R1, #+0]
    203            CapTouch_u8CurrentHSliderValue = 0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x....             LDR.N    R1,??DataTable10_2
   \   00000062   0x7008             STRB     R0,[R1, #+0]
    204            CapTouch_u8CurrentVSliderValue = 0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x....             LDR.N    R1,??DataTable10_3
   \   00000068   0x7008             STRB     R0,[R1, #+0]
    205            
    206            CapTouch_pfnStateMachine = CapTouchSM_Idle;
   \   0000006A   0x.... 0x....      ADR.W    R0,CapTouchSM_Idle
   \   0000006E   0x....             LDR.N    R1,??DataTable10_1
   \   00000070   0x6008             STR      R0,[R1, #+0]
    207            G_u32ApplicationFlags |= _APPLICATION_FLAGS_CAPTOUCH;
   \   00000072   0x....             LDR.N    R0,??DataTable10_8
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   0000007A   0x....             LDR.N    R1,??DataTable10_8
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    208            return (SUCCESS);
   \   0000007E   0x2001             MOVS     R0,#+1
   \                     ??CapTouchInitialize_1: (+1)
   \   00000080   0xBD0E             POP      {R1-R3,PC}       ;; return
    209          }
    210          
    211          
    212          /*----------------------------------------------------------------------------------------------------------------------
    213          Function CapTouchRunActiveState()
    214          
    215          Description:
    216          Selects and runs one iteration of the current state in the state machine.
    217          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    218          may take 1ms / n to execute.
    219          
    220          Requires:
    221            - State machine function pointer points at current state
    222          
    223          Promises:
    224            - Calls the function to pointed by the state machine function pointer
    225          */

   \                                 In section .text, align 2, keep-with-next
    226          void CapTouchRunActiveState(void)
    227          {
   \                     CapTouchRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    228            CapTouch_pfnStateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable10_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    229          
    230          } /* end CapTouchRunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    231          
    232          
    233          /*----------------------------------------------------------------------------------------------------------------------
    234          Function: CapTouchVerify
    235          
    236          Description:
    237          This function verifies the captouch library that's being used and makes sure
    238          the capabilities (and version) match what's expected and required.
    239          
    240          Requires:
    241          
    242          Promises:
    243            - Returns ERROR if the library doesn't match what's expected, else SUCCESS
    244          
    245          */

   \                                 In section .text, align 2, keep-with-next
    246          ErrorStatus CapTouchVerify(void)
    247          {
   \                     CapTouchVerify: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    248              u32 u32Error = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    249          
    250              qt_lib_siginfo_t plib_sig;
    251          
    252              /* Read library signature info */
    253              qt_measure_sensors( 0 );
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       qt_measure_sensors
    254              qt_get_library_sig(&plib_sig);
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x.... 0x....      BL       qt_get_library_sig
    255          
    256              /* QTouch or Matrix */
    257              if((plib_sig.lib_sig_lword & 0x01) == 0)
   \   00000010   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000014   0x07C0             LSLS     R0,R0,#+31
   \   00000016   0xD403             BMI.N    ??CapTouchVerify_0
    258              {
    259                  DebugPrintf("Library QTouch ");
   \   00000018   0x....             LDR.N    R0,??DataTable10_9
   \   0000001A   0x.... 0x....      BL       DebugPrintf
   \   0000001E   0xE003             B.N      ??CapTouchVerify_1
    260              }
    261              else
    262              {
    263                  DebugPrintf("Library QMatrix ");
   \                     ??CapTouchVerify_0: (+1)
   \   00000020   0x....             LDR.N    R0,??DataTable10_10
   \   00000022   0x.... 0x....      BL       DebugPrintf
    264                  u32Error++;
   \   00000026   0x1C64             ADDS     R4,R4,#+1
    265              }
    266          
    267              /* Max channels should be 32 */
    268              if ( ((plib_sig.lib_sig_lword >> 3) & 0x7F) != 32)
   \                     ??CapTouchVerify_1: (+1)
   \   00000028   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000002C   0xF3C0 0x00C6      UBFX     R0,R0,#+3,#+7
   \   00000030   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000032   0x2820             CMP      R0,#+32
   \   00000034   0xD000             BEQ.N    ??CapTouchVerify_2
    269              {
    270                 u32Error++;
   \   00000036   0x1C64             ADDS     R4,R4,#+1
    271              }
    272          
    273              /* Should supoprt sliders/roters */
    274              if( ((plib_sig.lib_sig_lword >> 10) & 0x01) == 0)
   \                     ??CapTouchVerify_2: (+1)
   \   00000038   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000003C   0xF3C0 0x2080      UBFX     R0,R0,#+10,#+1
   \   00000040   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD104             BNE.N    ??CapTouchVerify_3
    275              {
    276                  DebugPrintf("supports only keys \r\n");
   \   00000046   0x....             LDR.N    R0,??DataTable10_11
   \   00000048   0x.... 0x....      BL       DebugPrintf
    277                  u32Error++;
   \   0000004C   0x1C64             ADDS     R4,R4,#+1
   \   0000004E   0xE002             B.N      ??CapTouchVerify_4
    278              }
    279              else
    280              {
    281                  DebugPrintf("supports keys and rotors/sliders. ");
   \                     ??CapTouchVerify_3: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable10_12
   \   00000052   0x.... 0x....      BL       DebugPrintf
    282              }
    283          
    284              /* Should supoprt 8 sliders */
    285              if ( ((plib_sig.lib_sig_lword >> 11) & 0x1F) != 8 )
   \                     ??CapTouchVerify_4: (+1)
   \   00000056   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000005A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005C   0x0AC0             LSRS     R0,R0,#+11
   \   0000005E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000060   0x2808             CMP      R0,#+8
   \   00000062   0xD000             BEQ.N    ??CapTouchVerify_5
    286              {
    287                  u32Error++;
   \   00000064   0x1C64             ADDS     R4,R4,#+1
    288              }
    289          
    290              /* Current version: $0440 */
    291              DebugPrintf("Version ");
   \                     ??CapTouchVerify_5: (+1)
   \   00000066   0x....             LDR.N    R0,??DataTable10_13
   \   00000068   0x.... 0x....      BL       DebugPrintf
    292              DebugPrintNumber(plib_sig.library_version);
   \   0000006C   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000070   0x.... 0x....      BL       DebugPrintNumber
    293              DebugLineFeed();
   \   00000074   0x.... 0x....      BL       DebugLineFeed
    294              if ( (plib_sig.library_version) != 0x440)
   \   00000078   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000007C   0xF5B0 0x6F88      CMP      R0,#+1088
   \   00000080   0xD000             BEQ.N    ??CapTouchVerify_6
    295              {
    296                 u32Error++;
   \   00000082   0x1C64             ADDS     R4,R4,#+1
    297              }
    298          
    299              /* if error count = 0, all is good */
    300              if (u32Error == 0)
   \                     ??CapTouchVerify_6: (+1)
   \   00000084   0x2C00             CMP      R4,#+0
   \   00000086   0xD101             BNE.N    ??CapTouchVerify_7
    301              {
    302                 return (SUCCESS);
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0xE000             B.N      ??CapTouchVerify_8
    303              }
    304          
    305              return (ERROR);
   \                     ??CapTouchVerify_7: (+1)
   \   0000008C   0x2000             MOVS     R0,#+0
   \                     ??CapTouchVerify_8: (+1)
   \   0000008E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    306          }
    307          
    308          
    309          /*----------------------------------------------------------------------------------------------------------------------
    310          Function: CapTouchSetParameters
    311          
    312          Description:
    313          
    314          This will fill the default threshold values in the configuration
    315          data structure. These values can be tweaked to optimize performance.
    316          
    317          Requires:
    318            - DEF_QT_xxx values are defined in touch_api.h
    319          
    320          Promises:
    321            -
    322          
    323          */

   \                                 In section .text, align 2, keep-with-next
    324          static void CapTouchSetParameters( void )
    325          {
    326              /*  This can be modified by the user to different values   */
    327              qt_config_data.qt_di              = DEF_QT_DI;
   \                     CapTouchSetParameters: (+1)
   \   00000000   0x2004             MOVS     R0,#+4
   \   00000002   0x....             LDR.N    R1,??DataTable10_14
   \   00000004   0x7048             STRB     R0,[R1, #+1]
    328              qt_config_data.qt_neg_drift_rate  = DEF_QT_NEG_DRIFT_RATE;
   \   00000006   0x2014             MOVS     R0,#+20
   \   00000008   0x....             LDR.N    R1,??DataTable10_14
   \   0000000A   0x7108             STRB     R0,[R1, #+4]
    329              qt_config_data.qt_pos_drift_rate  = DEF_QT_POS_DRIFT_RATE;
   \   0000000C   0x2005             MOVS     R0,#+5
   \   0000000E   0x....             LDR.N    R1,??DataTable10_14
   \   00000010   0x7148             STRB     R0,[R1, #+5]
    330              qt_config_data.qt_max_on_duration = DEF_QT_MAX_ON_DURATION;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR.N    R1,??DataTable10_14
   \   00000016   0x70C8             STRB     R0,[R1, #+3]
    331              qt_config_data.qt_drift_hold_time = DEF_QT_DRIFT_HOLD_TIME;
   \   00000018   0x2014             MOVS     R0,#+20
   \   0000001A   0x....             LDR.N    R1,??DataTable10_14
   \   0000001C   0x7088             STRB     R0,[R1, #+2]
    332              qt_config_data.qt_recal_threshold = DEF_QT_RECAL_THRESHOLD;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable10_14
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    333              qt_config_data.qt_pos_recal_delay = DEF_QT_POS_RECAL_DELAY;
   \   00000024   0x2003             MOVS     R0,#+3
   \   00000026   0x....             LDR.N    R1,??DataTable10_14
   \   00000028   0x7188             STRB     R0,[R1, #+6]
    334          }
   \   0000002A   0x4770             BX       LR               ;; return
    335          
    336          
    337          /*----------------------------------------------------------------------------------------------------------------------
    338          Function: CapTouchUpdateSensorReadings
    339          
    340          Description:
    341          
    342          This is the main read routine to get the cap touch sensor
    343          readings. It should be called periodically every 25ms.
    344          
    345          Requires:
    346            - u16CurrentTimeMs is the current value of the tick timer
    347              (ideally in increments of 25ms)
    348          
    349          Promises:
    350            - returns TRUE for successful read
    351            - returns FALSE if read times out !!!!! TODO 
    352          
    353          */

   \                                 In section .text, align 2, keep-with-next
    354          BOOL CapTouchUpdateSensorReadings(u16 u16CurrentTimeMs_)
    355          {
   \                     CapTouchUpdateSensorReadings: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    356            /*status flags to indicate the re-burst for library*/
    357            uint16_t status_flag = 0u;
   \   00000004   0x2500             MOVS     R5,#+0
    358            uint16_t burst_flag = 0u;
   \   00000006   0x2600             MOVS     R6,#+0
    359          
    360          	do
    361          	{
    362          		/*  one time measure touch sensors    */
    363          		status_flag = qt_measure_sensors( u16CurrentTimeMs_ );
   \                     ??CapTouchUpdateSensorReadings_0: (+1)
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x.... 0x....      BL       qt_measure_sensors
   \   00000010   0x0005             MOVS     R5,R0
    364          
    365          		burst_flag = status_flag & QTLIB_BURST_AGAIN;
   \   00000012   0xF415 0x7080      ANDS     R0,R5,#0x100
   \   00000016   0x0006             MOVS     R6,R0
    366          
    367          	} while (burst_flag);
   \   00000018   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD1F4             BNE.N    ??CapTouchUpdateSensorReadings_0
    368          
    369              return (TRUE);  // TODO: add timeout to return false
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xBD70             POP      {R4-R6,PC}       ;; return
    370          }
    371          
    372          #if 0
    373          /*----------------------------------------------------------------------------------------------------------------------
    374          Function: u8CapTouchGetButtonValue
    375          
    376          Description:
    377          
    378          Call this function after a successful read from CapTouchUpdateSensorReadings
    379          to obtain the value of a button reading.
    380          
    381          Requires:
    382            - eButtonNumber_ is the button to read
    383          
    384          Promises:
    385            - returns 8-bit value for sensor reading
    386          
    387          */
    388          u8 u8CapTouchGetButtonValue(ButtonNumberType eButtonNumber_)
    389          {
    390              return (GET_SENSOR_STATE(eButtonNumber_));
    391          }
    392          #endif
    393          
    394          /*----------------------------------------------------------------------------------------------------------------------
    395          Function: u8CapTouchGetSliderValue
    396          
    397          Description:
    398          
    399          Call this function after a successful read from CapTouchUpdateSensorReadings
    400          to obtain the value of a slider reading.
    401          
    402          Requires:
    403            - eSliderNumber_ is the slider to read
    404          
    405          Promises:
    406            - returns 8-bit value for sensor reading
    407          
    408          */

   \                                 In section .text, align 2, keep-with-next
    409          u8 u8CapTouchGetSliderValue(SliderNumberType eSliderNumber_)
    410          {
    411            return (GET_ROTOR_SLIDER_POSITION(eSliderNumber_));
   \                     u8CapTouchGetSliderValue: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable10_15
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x1840             ADDS     R0,R0,R1
   \   00000006   0xF890 0x0084      LDRB     R0,[R0, #+132]
   \   0000000A   0x4770             BX       LR               ;; return
    412          }
    413          
    414          
    415          /*----------------------------------------------------------------------------------------------------------------------
    416          Function: CapTouchGetDebugValues
    417          
    418          Description:
    419          
    420          Call this function after a successful read to obtains the raw channel measurement
    421          and reference value. This will indicate what the 'normal' values should be when
    422          the sensor is idle/not active (no finger present) along with the current reading.
    423          
    424          Requires:
    425          
    426          Promises:
    427            - *pu16Measure_ returns the value of the current measurement
    428            - *pu16Reference_ returns the normal, untouched value
    429          
    430          */

   \                                 In section .text, align 2, keep-with-next
    431          void CapTouchGetDebugValues(u8 u8Channel, u16* pu16Measure_, u16* pu16Reference_)
    432          {
    433            *pu16Measure_ = qt_measure_data.channel_signals[u8Channel];
   \                     CapTouchGetDebugValues: (+1)
   \   00000000   0x....             LDR.N    R3,??DataTable10_15
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0xF833 0x3010      LDRH     R3,[R3, R0, LSL #+1]
   \   00000008   0x800B             STRH     R3,[R1, #+0]
    434            *pu16Reference_ = qt_measure_data.channel_references[u8Channel];
   \   0000000A   0x....             LDR.N    R3,??DataTable10_15
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0xEB13 0x0340      ADDS     R3,R3,R0, LSL #+1
   \   00000012   0xF8B3 0x3040      LDRH     R3,[R3, #+64]
   \   00000016   0x8013             STRH     R3,[R2, #+0]
    435          }
   \   00000018   0x4770             BX       LR               ;; return
    436          
    437          
    438          /***********************************************************************************************************************
    439          State Machine Function Definitions
    440          ***********************************************************************************************************************/
    441          
    442          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    443          void CapTouchSM_Idle(void)
    444          {
    445            /* Do nothing here as the sensor is off */
    446            
    447          } /* end CapTouchSM_Idle */
   \                     CapTouchSM_Idle: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    448          
    449          
    450          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    451          void CapTouchSM_Measure(void)
    452          {
   \                     CapTouchSM_Measure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    453            static u32 u32DebugPrintTimer = 0;
    454            static u8 au8CaptouchValuesMessage[] = "Captouch (H:V) "; 
    455            
    456            if( IsTimeUp(&CapTouch_u32Timer, QTOUCH_MEASUREMENT_TIME_MS) )
   \   00000002   0x2119             MOVS     R1,#+25
   \   00000004   0x....             LDR.N    R0,??DataTable10_7
   \   00000006   0x.... 0x....      BL       IsTimeUp
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD012             BEQ.N    ??CapTouchSM_Measure_0
    457            {
    458              CapTouch_u32Timer = G_u32SystemTime1ms;
   \   0000000E   0x....             LDR.N    R0,??DataTable10_16
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x....             LDR.N    R1,??DataTable10_7
   \   00000014   0x6008             STR      R0,[R1, #+0]
    459              CapTouchUpdateSensorReadings((u16)G_u32SystemTime1ms);
   \   00000016   0x....             LDR.N    R0,??DataTable10_16
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001C   0x.... 0x....      BL       CapTouchUpdateSensorReadings
    460          
    461              /* Read the horizontal slider */
    462              CapTouch_u8CurrentHSliderValue = u8CapTouchGetSliderValue(SLIDER0);
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       u8CapTouchGetSliderValue
   \   00000026   0x....             LDR.N    R1,??DataTable10_2
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    463              
    464              /* Read the vertical slider */
    465              CapTouch_u8CurrentVSliderValue = u8CapTouchGetSliderValue(SLIDER1);
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       u8CapTouchGetSliderValue
   \   00000030   0x....             LDR.N    R1,??DataTable10_3
   \   00000032   0x7008             STRB     R0,[R1, #+0]
    466          
    467            }
    468            
    469            /* Print the current values if Debug function is enabled */
    470            if(G_u32DebugFlags & _DEBUG_CAPTOUCH_VALUES_ENABLE)
   \                     ??CapTouchSM_Measure_0: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable10_17
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x03C0             LSLS     R0,R0,#+15
   \   0000003A   0xD519             BPL.N    ??CapTouchSM_Measure_1
    471            {
    472              if( IsTimeUp(&u32DebugPrintTimer, QTOUCH_DEBUG_PRINT_PERIOD) )
   \   0000003C   0x21FA             MOVS     R1,#+250
   \   0000003E   0x....             LDR.N    R0,??DataTable10_18
   \   00000040   0x.... 0x....      BL       IsTimeUp
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD013             BEQ.N    ??CapTouchSM_Measure_1
    473              {
    474                u32DebugPrintTimer = G_u32SystemTime1ms;
   \   00000048   0x....             LDR.N    R0,??DataTable10_16
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x....             LDR.N    R1,??DataTable10_18
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    475          
    476                DebugPrintf(au8CaptouchValuesMessage);
   \   00000050   0x....             LDR.N    R0,??DataTable10_19
   \   00000052   0x.... 0x....      BL       DebugPrintf
    477                DebugPrintNumber(CapTouch_u8CurrentHSliderValue);
   \   00000056   0x....             LDR.N    R0,??DataTable10_2
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0x.... 0x....      BL       DebugPrintNumber
    478                DebugPrintf(":");
   \   0000005E   0x....             ADR.N    R0,??DataTable10  ;; ":"
   \   00000060   0x.... 0x....      BL       DebugPrintf
    479                DebugPrintNumber(CapTouch_u8CurrentVSliderValue);
   \   00000064   0x....             LDR.N    R0,??DataTable10_3
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x.... 0x....      BL       DebugPrintNumber
    480                DebugLineFeed();
   \   0000006C   0x.... 0x....      BL       DebugLineFeed
    481              }
    482             
    483            }
    484                         
    485          } /* end CapTouchSM_Idle */
   \                     ??CapTouchSM_Measure_1: (+1)
   \   00000070   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ??u32DebugPrintTimer:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     ??au8CaptouchValuesMessage:
   \   00000000   0x43 0x61          DC8 "Captouch (H:V) "
   \              0x70 0x74    
   \              0x6F 0x75    
   \              0x63 0x68    
   \              0x20 0x28    
   \              0x48 0x3A    
   \              0x56 0x29    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x3A 0x00          DC8      ":",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     CapTouch_pfnStateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     CapTouch_u8CurrentHSliderValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     CapTouch_u8CurrentVSliderValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     calc_masks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     burst_10_AA_BB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x........         DC32     qt_filter_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x........         DC32     CapTouch_u32Timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x........         DC32     G_u32ApplicationFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x........         DC32     qt_config_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x........         DC32     qt_measure_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x........         DC32     G_u32DebugFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x........         DC32     ??u32DebugPrintTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x........         DC32     ??au8CaptouchValuesMessage

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x4C 0x69          DC8 "Library QTouch "
   \              0x62 0x72    
   \              0x61 0x72    
   \              0x79 0x20    
   \              0x51 0x54    
   \              0x6F 0x75    
   \              0x63 0x68    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x4C 0x69          DC8 "Library QMatrix "
   \              0x62 0x72    
   \              0x61 0x72    
   \              0x79 0x20    
   \              0x51 0x4D    
   \              0x61 0x74    
   \              0x72 0x69    
   \              0x78 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x73 0x75          DC8 "supports only keys \015\012"
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x73    
   \              0x20 0x6F    
   \              0x6E 0x6C    
   \              0x79 0x20    
   \              0x6B 0x65    
   \              0x79 0x73    
   \              0x20 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x73 0x75          DC8 "supports keys and rotors/sliders. "
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x73    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x73 0x20    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x72 0x6F    
   \              0x74 0x6F    
   \              0x72 0x73    
   \              0x2F 0x73    
   \              0x6C 0x69    
   \              0x64 0x65    
   \              0x72 0x73    
   \              0x2E 0x20    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x56 0x65          DC8 "Version "
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 2
   \   00000000   0x3A 0x00          DC8 ":"

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CapTouchGetDebugValues
      16   CapTouchInitialize
        16   -> CapTouchSetParameters
        16   -> CapTouchVerify
        16   -> qt_calibrate_sensing
        16   -> qt_enable_slider
        16   -> qt_init_sensing_with_burst
        16   -> qt_reset_sensing
       0   CapTouchOff
       0   CapTouchOn
       8   CapTouchRunActiveState
         8   -- Indirect call
       0   CapTouchSM_Idle
       8   CapTouchSM_Measure
         8   -> CapTouchUpdateSensorReadings
         8   -> DebugLineFeed
         8   -> DebugPrintNumber
         8   -> DebugPrintf
         8   -> IsTimeUp
         8   -> u8CapTouchGetSliderValue
       0   CapTouchSetParameters
      16   CapTouchUpdateSensorReadings
        16   -> qt_measure_sensors
      16   CapTouchVerify
        16   -> DebugLineFeed
        16   -> DebugPrintNumber
        16   -> DebugPrintf
        16   -> qt_get_library_sig
        16   -> qt_measure_sensors
       0   CaptouchCurrentHSlidePosition
       0   CaptouchCurrentVSlidePosition
       0   u8CapTouchGetSliderValue


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
      16  ?_0
      20  ?_1
      24  ?_2
      36  ?_3
      12  ?_4
       2  ?_5
      26  CapTouchGetDebugValues
     130  CapTouchInitialize
      22  CapTouchOff
      10  CapTouchOn
      10  CapTouchRunActiveState
       2  CapTouchSM_Idle
     114  CapTouchSM_Measure
      44  CapTouchSetParameters
      34  CapTouchUpdateSensorReadings
     144  CapTouchVerify
       4  CapTouch_pfnStateMachine
       4  CapTouch_u32Timer
       1  CapTouch_u8CurrentHSliderValue
       1  CapTouch_u8CurrentVSliderValue
       6  CaptouchCurrentHSlidePosition
       6  CaptouchCurrentVSlidePosition
      16  au8CaptouchValuesMessage
       4  u32DebugPrintTimer
      12  u8CapTouchGetSliderValue

 
  14 bytes in section .bss
  16 bytes in section .data
 110 bytes in section .rodata
 640 bytes in section .text
 
 640 bytes of CODE  memory
 110 bytes of CONST memory
  30 bytes of DATA  memory

Errors: none
Warnings: none
